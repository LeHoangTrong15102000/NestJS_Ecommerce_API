import { Test, TestingModule } from '@nestjs/testing'
import { HashingService } from '../hashing.service'

describe('HashingService', () => {
  let service: HashingService

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [HashingService],
    }).compile()

    service = module.get<HashingService>(HashingService)
  })

  describe('hash', () => {
    it('should hash a password successfully', async () => {
      // Arrange - Chu·∫©n b·ªã d·ªØ li·ªáu test
      const plainPassword = 'password123'

      // Act - Th·ª±c hi·ªán hash
      const result = await service.hash(plainPassword)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£
      expect(result).toBeDefined()
      expect(typeof result).toBe('string')
      expect(result).not.toBe(plainPassword)
      expect(result.length).toBeGreaterThan(50) // bcrypt hash length
    })

    it('should generate different hashes for same password', async () => {
      // Arrange - Chu·∫©n b·ªã m·∫≠t kh·∫©u gi·ªëng nhau
      const plainPassword = 'password123'

      // Act - Th·ª±c hi·ªán hash 2 l·∫ßn
      const hash1 = await service.hash(plainPassword)
      const hash2 = await service.hash(plainPassword)

      // Assert - Ki·ªÉm tra hash kh√°c nhau (do salt)
      expect(hash1).not.toBe(hash2)
      expect(hash1).toBeDefined()
      expect(hash2).toBeDefined()
    })

    it('should handle empty string', async () => {
      // Arrange - Chu·∫©n b·ªã chu·ªói r·ªóng
      const emptyPassword = ''

      // Act - Th·ª±c hi·ªán hash chu·ªói r·ªóng
      const result = await service.hash(emptyPassword)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£
      expect(result).toBeDefined()
      expect(typeof result).toBe('string')
      expect(result).not.toBe('')
    })
  })

  describe('compare', () => {
    it('should return true for correct password', async () => {
      // Arrange - Chu·∫©n b·ªã d·ªØ li·ªáu so s√°nh ƒë√∫ng
      const plainPassword = 'password123'
      const hashedPassword = await service.hash(plainPassword)

      // Act - Th·ª±c hi·ªán so s√°nh
      const result = await service.compare(plainPassword, hashedPassword)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£ ƒë√∫ng
      expect(result).toBe(true)
    })

    it('should return false for incorrect password', async () => {
      // Arrange - Chu·∫©n b·ªã d·ªØ li·ªáu so s√°nh sai
      const plainPassword = 'password123'
      const wrongPassword = 'wrongpassword'
      const hashedPassword = await service.hash(plainPassword)

      // Act - Th·ª±c hi·ªán so s√°nh v·ªõi m·∫≠t kh·∫©u sai
      const result = await service.compare(wrongPassword, hashedPassword)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£ sai
      expect(result).toBe(false)
    })

    it('should return false for empty password', async () => {
      // Arrange - Chu·∫©n b·ªã m·∫≠t kh·∫©u r·ªóng
      const plainPassword = 'password123'
      const hashedPassword = await service.hash(plainPassword)

      // Act - Th·ª±c hi·ªán so s√°nh v·ªõi m·∫≠t kh·∫©u r·ªóng
      const result = await service.compare('', hashedPassword)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£ sai
      expect(result).toBe(false)
    })

    it('should handle invalid hash gracefully', async () => {
      // Arrange - Chu·∫©n b·ªã hash kh√¥ng h·ª£p l·ªá
      const plainPassword = 'password123'
      const invalidHash = 'invalid-hash'

      // Act - Th·ª±c hi·ªán so s√°nh v·ªõi hash kh√¥ng h·ª£p l·ªá
      const result = await service.compare(plainPassword, invalidHash)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ false cho hash kh√¥ng h·ª£p l·ªá
      expect(result).toBe(false)
    })
  })

  describe('edge cases', () => {
    it('should handle special characters in password', async () => {
      // Arrange - Chu·∫©n b·ªã m·∫≠t kh·∫©u c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát
      const specialPassword = '!@#$%^&*()_+-=[]{}|;":,./<>?'

      // Act - Th·ª±c hi·ªán hash v√† so s√°nh
      const hashedPassword = await service.hash(specialPassword)
      const isMatch = await service.compare(specialPassword, hashedPassword)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£
      expect(hashedPassword).toBeDefined()
      expect(isMatch).toBe(true)
    })

    it('should handle unicode characters', async () => {
      // Arrange - Chu·∫©n b·ªã m·∫≠t kh·∫©u c√≥ k√Ω t·ª± unicode
      const unicodePassword = 'password123üîí'

      // Act - Th·ª±c hi·ªán hash v√† so s√°nh
      const hashedPassword = await service.hash(unicodePassword)
      const isMatch = await service.compare(unicodePassword, hashedPassword)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£
      expect(hashedPassword).toBeDefined()
      expect(isMatch).toBe(true)
    })

    it('should handle very long passwords', async () => {
      // Arrange - Chu·∫©n b·ªã m·∫≠t kh·∫©u r·∫•t d√†i
      const longPassword = 'a'.repeat(1000)

      // Act - Th·ª±c hi·ªán hash v√† so s√°nh
      const hashedPassword = await service.hash(longPassword)
      const isMatch = await service.compare(longPassword, hashedPassword)

      // Assert - Ki·ªÉm tra k·∫øt qu·∫£
      expect(hashedPassword).toBeDefined()
      expect(isMatch).toBe(true)
    })
  })
})
