openapi: 3.0.3
info:
  title: Luma API
  version: 1.0.0
  description: |
    The Luma API is a JSON-based API that allows you to programmatically manage your events and guests.
    
    **Base URL**: https://api.lu.ma/public/v1
    
    **Authentication**: Include your API key in the `x-luma-api-key` header
    
    **Rate Limits**: 300 requests per minute across all endpoints

servers:
  - url: https://api.lu.ma/public/v1
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  # EVENTS
  /event/get:
    get:
      tags:
        - Events
      operationId: getEvent
      summary: Get Event
      description: Get details about an event you are a host of
      parameters:
        - name: api_id
          in: query
          required: true
          schema:
            type: string
          description: Event API ID
      responses:
        '200':
          description: Event details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Event not found

  # GUESTS
  /event/get-guest:
    get:
      tags:
        - Guests
      operationId: getGuest
      summary: Get Guest
      description: Get an event guest by looking them up by their ID. This supports looking them up by different parameters.
      parameters:
        - name: event_id
          in: query
          required: true
          schema:
            type: string
          description: Event ID, this usually starts with evt-
        - name: id
          in: query
          required: false
          schema:
            type: string
          description: You can choose from a few different identifiers here including guest ID (gst-), ticket key, guest key (g-), or the user's email.
      responses:
        '200':
          description: Guest details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Guest not found

  /event/get-guests:
    get:
      tags:
        - Guests
      operationId: getGuests
      summary: Get Guests
      description: Get list of guests who have registered or been invited to an event.
      parameters:
        - name: event_api_id
          in: query
          required: true
          schema:
            type: string
          description: Event API ID
        - name: approval_status
          in: query
          required: false
          schema:
            type: string
            enum: [approved, session, pending_approval, invited, declined, waitlist]
          description: Filter by approval status
        - name: pagination_cursor
          in: query
          required: false
          schema:
            type: string
          description: Value of next_cursor from a previous request
        - name: pagination_limit
          in: query
          required: false
          schema:
            type: number
          description: The number of items to return. The server will enforce a maximum number.
        - name: sort_column
          in: query
          required: false
          schema:
            type: string
            enum: [name, email, created_at, registered_at, checked_in_at]
          description: Column to sort by
        - name: sort_direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc, asc_nulls_last, desc_nulls_last]
          description: Sort direction
      responses:
        '200':
          description: Event guests retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestsResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /event/update-guest-status:
    post:
      tags:
        - Guests
      operationId: updateGuestStatus
      summary: Update Guest Status
      description: Update guest attendance status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGuestStatusRequest'
      responses:
        '200':
          description: Guest status updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Guest not found

  # COUPONS
  /event/coupons:
    get:
      tags:
        - Coupons
      operationId: listEventCoupons
      summary: List Event Coupons
      description: List all coupons that have been created for an event.
      parameters:
        - name: event_api_id
          in: query
          required: true
          schema:
            type: string
          description: Event API ID
        - name: pagination_cursor
          in: query
          required: false
          schema:
            type: string
          description: Value of next_cursor from a previous request
        - name: pagination_limit
          in: query
          required: false
          schema:
            type: number
          description: The number of items to return. The server will enforce a maximum number.
      responses:
        '200':
          description: Coupons retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponsResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /event/create:
    post:
      tags:
        - Events
      operationId: createEvent
      summary: Create Event
      description: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '200':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /event/update:
    post:
      tags:
        - Events
      operationId: updateEvent
      summary: Update Event
      description: Update an existing event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Event not found

  # GUESTS
  /event/get-guests:
    get:
      tags:
        - Guests
      operationId: getEventGuests
      summary: Get Event Guests
      description: Get list of guests who have registered or been invited to an event
      parameters:
        - name: event_api_id
          in: query
          required: true
          schema:
            type: string
          description: Event API ID
        - name: approval_status
          in: query
          required: false
          schema:
            type: string
            enum: [going, not_going, maybe, pending]
          description: Filter by approval status
        - name: sort_column
          in: query
          required: false
          schema:
            type: string
            enum: [created_at, name, email]
          description: Column to sort by
        - name: sort_direction
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort direction
      responses:
        '200':
          description: Event guests retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestsResponse'

  /event/get-guest:
    get:
      tags:
        - Guests
      operationId: getEventGuest
      summary: Get Event Guest
      description: Get a guest by their Guest API ID, email or Proxy Key
      parameters:
        - name: event_api_id
          in: query
          required: true
          schema:
            type: string
          description: Event API ID
        - name: api_id
          in: query
          required: false
          schema:
            type: string
          description: Guest API ID
        - name: email
          in: query
          required: false
          schema:
            type: string
            format: email
          description: Guest email
        - name: proxy_key
          in: query
          required: false
          schema:
            type: string
          description: Guest proxy key
      responses:
        '200':
          description: Guest details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestResponse'

  /event/add-guest:
    post:
      tags:
        - Guests
      operationId: addGuest
      summary: Add Guests
      description: Add a guest to the event. They will be added with the status "Going"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGuestRequest'
      responses:
        '201':
          description: Guest added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuestResponse'

  /event/update-guest-status:
    post:
      tags:
        - Guests
      operationId: updateGuestStatus
      summary: Update Guest Status
      description: Update guest attendance status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGuestStatusRequest'
      responses:
        '200':
          description: Guest status updated successfully

  /event/send-invites:
    post:
      tags:
        - Guests
      operationId: sendInvites
      summary: Send Invites
      description: Send invitations to guests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendInvitesRequest'
      responses:
        '200':
          description: Invites sent successfully

  # HOSTS
  /event/add-host:
    post:
      tags:
        - Hosts
      operationId: addHost
      summary: Add Host
      description: Add a host to the event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddHostRequest'
      responses:
        '201':
          description: Host added successfully

  # COUPONS
  /event/create-coupon:
    post:
      tags:
        - Coupons
      operationId: createCoupon
      summary: Create Coupon
      description: Create a coupon for the event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCouponRequest'
      responses:
        '201':
          description: Coupon created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponResponse'

  /coupon/update:
    patch:
      tags:
        - Coupons
      operationId: updateCoupon
      summary: Update Coupon
      description: Update an existing coupon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCouponRequest'
      responses:
        '200':
          description: Coupon updated successfully

  /event/list-coupons:
    get:
      tags:
        - Coupons
      operationId: listEventCoupons
      summary: List Event Coupons
      description: List all coupons for an event
      parameters:
        - name: event_api_id
          in: query
          required: true
          schema:
            type: string
          description: Event API ID
      responses:
        '200':
          description: Coupons retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponsResponse'

  # TICKETS
  /event/list-ticket-types:
    get:
      tags:
        - Tickets
      operationId: listTicketTypes
      summary: List Ticket Types
      description: Get all ticket types for an event
      parameters:
        - name: event_api_id
          in: query
          required: true
          schema:
            type: string
          description: Event API ID
      responses:
        '200':
          description: Ticket types retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketTypesResponse'

  /event/get-ticket-type:
    get:
      tags:
        - Tickets
      operationId: getTicketType
      summary: Get Ticket Type
      description: Get details of a specific ticket type
      parameters:
        - name: ticket_type_api_id
          in: query
          required: true
          schema:
            type: string
          description: Ticket type API ID
      responses:
        '200':
          description: Ticket type retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketTypeResponse'

  /event/create-ticket-type:
    post:
      tags:
        - Tickets
      operationId: createTicketType
      summary: Create Ticket Type
      description: Create a new ticket type for an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketTypeRequest'
      responses:
        '201':
          description: Ticket type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketTypeResponse'

  # CALENDARS
  /calendar/list-events:
    get:
      tags:
        - Calendars
      operationId: listEvents
      summary: List Events
      description: List all events managed by your calendar
      parameters:
        - name: before
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: List events before this date
        - name: after
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: List events after this date
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarEventsResponse'

  /calendar/list-person-tags:
    get:
      tags:
        - Calendars
      operationId: listPersonTags
      summary: List Person Tags
      description: Get all person tags for the calendar
      responses:
        '200':
          description: Person tags retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonTagsResponse'

  /calendar/lookup-event:
    get:
      tags:
        - Calendars
      operationId: lookupEvent
      summary: Lookup Event
      description: Lookup event by URL or other identifier
      parameters:
        - name: url
          in: query
          required: false
          schema:
            type: string
          description: Event URL
        - name: identifier
          in: query
          required: false
          schema:
            type: string
          description: Event identifier
      responses:
        '200':
          description: Event found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'

  /calendar/list-people:
    get:
      tags:
        - Calendars
      operationId: listPeople
      summary: List People
      description: Get all people in the calendar
      responses:
        '200':
          description: People retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeopleResponse'

  /calendar/import-people:
    post:
      tags:
        - Calendars
      operationId: importPeople
      summary: Import People
      description: Import people to the calendar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportPeopleRequest'
      responses:
        '201':
          description: People imported successfully

  # MISCELLANEOUS
  /user/get-self:
    get:
      tags:
        - User
      operationId: getSelf
      summary: Get Self
      description: Get authenticated user information
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /upload/create-upload-url:
    post:
      tags:
        - Upload
      operationId: createUploadUrl
      summary: Create Upload URL
      description: Create a signed URL for uploading files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUploadUrlRequest'
      responses:
        '201':
          description: Upload URL created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadUrlResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-luma-api-key

  schemas:
    # EVENT SCHEMAS
    CreateEventRequest:
      type: object
      required:
        - name
        - start_at
        - end_at
      properties:
        name:
          type: string
          example: "Tech Meetup Ho Chi Minh"
        description:
          type: string
          example: "Monthly tech meetup for developers"
        start_at:
          type: string
          format: date-time
          example: "2025-01-15T19:00:00Z"
        end_at:
          type: string
          format: date-time
          example: "2025-01-15T21:00:00Z"
        timezone:
          type: string
          example: "Asia/Ho_Chi_Minh"
        location_type:
          type: string
          enum: [physical, online, hybrid]
          default: physical
        geo_latitude:
          type: number
          format: float
          example: 10.7769
        geo_longitude:
          type: number
          format: float
          example: 106.7009
        geo_address_formatted:
          type: string
          example: "123 Nguyen Hue, District 1, Ho Chi Minh City"
        meeting_url:
          type: string
          format: uri
          example: "https://zoom.us/j/123456789"
        visibility:
          type: string
          enum: [public, private]
          default: public
        require_approval:
          type: boolean
          default: false
        capacity:
          type: integer
          example: 50
        cover_image_url:
          type: string
          format: uri
          example: "https://example.com/cover.jpg"
        tags:
          type: array
          items:
            type: string
          example: ["technology", "meetup", "vietnam"]

    UpdateEventRequest:
      type: object
      required:
        - event_api_id
      properties:
        event_api_id:
          type: string
        name:
          type: string
        description:
          type: string
        start_at:
          type: string
          format: date-time
        end_at:
          type: string
          format: date-time
        timezone:
          type: string
        location_type:
          type: string
          enum: [physical, online, hybrid]
        geo_latitude:
          type: number
          format: float
        geo_longitude:
          type: number
          format: float
        geo_address_formatted:
          type: string
        meeting_url:
          type: string
          format: uri
        visibility:
          type: string
          enum: [public, private]
        require_approval:
          type: boolean
        capacity:
          type: integer
        cover_image_url:
          type: string
          format: uri

    EventResponse:
      type: object
      properties:
        api_id:
          type: string
          example: "evt-abc123"
        name:
          type: string
          example: "Tech Meetup Ho Chi Minh"
        description:
          type: string
        url:
          type: string
          format: uri
          example: "https://lu.ma/tech-meetup"
        start_at:
          type: string
          format: date-time
        end_at:
          type: string
          format: date-time
        timezone:
          type: string
        location_type:
          type: string
        geo_latitude:
          type: number
          format: float
        geo_longitude:
          type: number
          format: float
        geo_address_formatted:
          type: string
        meeting_url:
          type: string
          format: uri
        visibility:
          type: string
        require_approval:
          type: boolean
        capacity:
          type: integer
        guest_count:
          type: integer
        cover_image_url:
          type: string
          format: uri
        status:
          type: string
          enum: [draft, published, cancelled]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # GUEST SCHEMAS
    AddGuestRequest:
      type: object
      required:
        - event_api_id
        - email
      properties:
        event_api_id:
          type: string
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        approval_status:
          type: string
          enum: [going, not_going, maybe, pending]
          default: going
        ticket_type_api_id:
          type: string

    UpdateGuestStatusRequest:
      type: object
      required:
        - event_api_id
        - guest_api_id
        - approval_status
      properties:
        event_api_id:
          type: string
        guest_api_id:
          type: string
        approval_status:
          type: string
          enum: [going, not_going, maybe, pending]

    SendInvitesRequest:
      type: object
      required:
        - event_api_id
        - emails
      properties:
        event_api_id:
          type: string
        emails:
          type: array
          items:
            type: string
            format: email
          example: ["user1@example.com", "user2@example.com"]
        message:
          type: string
          example: "You're invited to our amazing event!"

    GuestResponse:
      type: object
      properties:
        api_id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        approval_status:
          type: string
          enum: [going, not_going, maybe, pending]
        ticket_type_api_id:
          type: string
        avatar_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    GuestsResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/GuestResponse'
        has_more:
          type: boolean
        total_count:
          type: integer

    # HOST SCHEMAS
    AddHostRequest:
      type: object
      required:
        - event_api_id
        - email
      properties:
        event_api_id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string

    # COUPON SCHEMAS
    CreateCouponRequest:
      type: object
      required:
        - event_api_id
        - code
        - discount_type
        - discount_value
      properties:
        event_api_id:
          type: string
        code:
          type: string
          example: "EARLYBIRD"
        discount_type:
          type: string
          enum: [percentage, fixed_amount]
        discount_value:
          type: number
          example: 20
        max_uses:
          type: integer
          example: 100
        expires_at:
          type: string
          format: date-time
        description:
          type: string

    UpdateCouponRequest:
      type: object
      required:
        - coupon_api_id
      properties:
        coupon_api_id:
          type: string
        code:
          type: string
        discount_type:
          type: string
          enum: [percentage, fixed_amount]
        discount_value:
          type: number
        max_uses:
          type: integer
        expires_at:
          type: string
          format: date-time
        description:
          type: string
        is_active:
          type: boolean

    CouponResponse:
      type: object
      properties:
        api_id:
          type: string
        code:
          type: string
        discount_type:
          type: string
        discount_value:
          type: number
        max_uses:
          type: integer
        current_uses:
          type: integer
        expires_at:
          type: string
          format: date-time
        description:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    CouponsResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/CouponResponse'

    # TICKET SCHEMAS
    CreateTicketTypeRequest:
      type: object
      required:
        - event_api_id
        - name
        - price
      properties:
        event_api_id:
          type: string
        name:
          type: string
          example: "General Admission"
        description:
          type: string
        price:
          type: number
          example: 25.00
        currency:
          type: string
          default: "USD"
          example: "VND"
        quantity:
          type: integer
          example: 100
        sale_start_at:
          type: string
          format: date-time
        sale_end_at:
          type: string
          format: date-time
        is_visible:
          type: boolean
          default: true

    TicketTypeResponse:
      type: object
      properties:
        api_id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        currency:
          type: string
        quantity:
          type: integer
        quantity_sold:
          type: integer
        sale_start_at:
          type: string
          format: date-time
        sale_end_at:
          type: string
          format: date-time
        is_visible:
          type: boolean
        created_at:
          type: string
          format: date-time

    TicketTypesResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/TicketTypeResponse'

    # CALENDAR SCHEMAS
    CalendarEventsResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/EventResponse'
        has_more:
          type: boolean

    PersonTagsResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            type: object
            properties:
              api_id:
                type: string
              name:
                type: string
              color:
                type: string
              created_at:
                type: string
                format: date-time

    PeopleResponse:
      type: object
      properties:
        entries:
          type: array
          items:
            type: object
            properties:
              api_id:
                type: string
              email:
                type: string
                format: email
              name:
                type: string
              avatar_url:
                type: string
                format: uri

    ImportPeopleRequest:
      type: object
      required:
        - people
      properties:
        people:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
                format: email
              name:
                type: string

    # USER SCHEMAS
    UserResponse:
      type: object
      properties:
        api_id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        avatar_url:
          type: string
          format: uri
        calendar_api_id:
          type: string

    # UPLOAD SCHEMAS
    CreateUploadUrlRequest:
      type: object
      required:
        - file_name
        - content_type
      properties:
        file_name:
          type: string
          example: "event-cover.jpg"
        content_type:
          type: string
          example: "image/jpeg"

    UploadUrlResponse:
      type: object
      properties:
        upload_url:
          type: string
          format: uri
        file_url:
          type: string
          format: uri
        expires_at:
          type: string
          format: date-time

    # ERROR SCHEMAS
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed"
        details:
          type: object