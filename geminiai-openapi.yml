# libs/nest-gemini/src/utils/oas.yml
openapi: 3.0.3
info:
  title: Google Gemini AI API
  version: v1beta
  description: |
    The Google Gemini AI API allows you to integrate Google's most capable multimodal AI model into your applications.

    **Base URL**: https://generativelanguage.googleapis.com/v1beta

    **Authentication**: Include your API key in the `x-goog-api-key` header

    **Rate Limits**: 
    - 15 requests per minute (free tier)
    - 1 million tokens per minute
    - 1,500 requests per day

servers:
  - url: https://generativelanguage.googleapis.com/v1beta
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  /models:
    get:
      tags:
        - Models
      operationId: listModels
      summary: List Models
      description: List all available Gemini models
      parameters:
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            default: 50
        - name: pageToken
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Models retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
        '401':
          description: Unauthorized - Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /models/{modelId}:
    get:
      tags:
        - Models
      operationId: getModel
      summary: Get Model
      description: Get details about a specific model
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID (e.g., gemini-1.5-flash)
      responses:
        '200':
          description: Model details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'

  /models/{modelId}:generateContent:
    post:
      tags:
        - Generation
      operationId: generateContent
      summary: Generate Content
      description: Generate content using the specified model
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID (e.g., gemini-1.5-flash)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateContentRequest'
      responses:
        '200':
          description: Content generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateContentResponse'

  /models/{modelId}:streamGenerateContent:
    post:
      tags:
        - Generation
      operationId: streamGenerateContent
      summary: Stream Generate Content
      description: Generate content with streaming response
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateContentRequest'
      responses:
        '200':
          description: Streaming response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateContentResponse'

  /models/{modelId}:countTokens:
    post:
      tags:
        - Tokens
      operationId: countTokens
      summary: Count Tokens
      description: Count tokens in the input
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountTokensRequest'
      responses:
        '200':
          description: Token count retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountTokensResponse'

  /models/{modelId}:embedContent:
    post:
      tags:
        - Embeddings
      operationId: embedContent
      summary: Embed Content
      description: Generate embeddings for the input content
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID (use embedding models like text-embedding-004)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedContentRequest'
      responses:
        '200':
          description: Embeddings generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedContentResponse'

  /models/{modelId}:batchEmbedContents:
    post:
      tags:
        - Embeddings
      operationId: batchEmbedContents
      summary: Batch Embed Contents
      description: Generate embeddings for multiple contents in a batch
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID (use embedding models like text-embedding-004)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchEmbedContentsRequest'
      responses:
        '200':
          description: Batch embeddings generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchEmbedContentsResponse'

  /models/{modelId}:predict:
    post:
      tags:
        - Prediction
      operationId: predict
      summary: Predict
      description: Performs a prediction request
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictRequest'
      responses:
        '200':
          description: Prediction completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictResponse'

  /models/{modelId}:predictLongRunning:
    post:
      tags:
        - Prediction
      operationId: predictLongRunning
      summary: Predict Long Running
      description: Same as models.predict but returns an LRO
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
          description: Model ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictRequest'
      responses:
        '200':
          description: Long running operation started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'

  # FILES API
  /files:
    get:
      tags:
        - Files
      operationId: listFiles
      summary: List Files
      description: Lists the metadata for Files owned by the requesting project
      parameters:
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            maximum: 100
            default: 10
          description: Maximum number of Files to return per page
        - name: pageToken
          in: query
          required: false
          schema:
            type: string
          description: The page token from the previous response
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'

    post:
      tags:
        - Files
      operationId: createFile
      summary: Create File
      description: Creates a File
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  type: string
                  description: JSON metadata for the file
                file:
                  type: string
                  format: binary
                  description: The file to upload
      responses:
        '200':
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'

  /files/{fileId}:
    get:
      tags:
        - Files
      operationId: getFile
      summary: Get File
      description: Gets the metadata for the given File
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
          description: The File ID
      responses:
        '200':
          description: File metadata retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'

    delete:
      tags:
        - Files
      operationId: deleteFile
      summary: Delete File
      description: Deletes the File
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
          description: The File ID
      responses:
        '200':
          description: File deleted successfully

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-goog-api-key

  schemas:
    # MODELS
    ListModelsResponse:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/Model'
        nextPageToken:
          type: string

    Model:
      type: object
      properties:
        name:
          type: string
          example: 'models/gemini-1.5-flash-001'
          description: The resource name of the Model
        baseModelId:
          type: string
          example: 'gemini-1.5-flash'
          description: The name of the base model, pass this to the generation request
        version:
          type: string
          example: '001'
          description: The version number of the model
        displayName:
          type: string
          example: 'Gemini 1.5 Flash'
          description: The human-readable name of the model
        description:
          type: string
          description: A short description of the model
        inputTokenLimit:
          type: integer
          description: Maximum number of input tokens allowed for this model
        outputTokenLimit:
          type: integer
          description: Maximum number of output tokens available for this model
        supportedGenerationMethods:
          type: array
          items:
            type: string
          description: The model's supported generation methods
          example: ['generateContent', 'streamGenerateContent', 'countTokens']
        thinking:
          type: boolean
          description: Whether the model supports thinking
        temperature:
          type: number
          format: float
          description: Controls the randomness of the output
        maxTemperature:
          type: number
          format: float
          description: The maximum temperature this model can use
        topP:
          type: number
          format: float
          description: For Nucleus sampling
        topK:
          type: integer
          description: For Top-k sampling

    # GENERATION
    GenerateContentRequest:
      type: object
      required:
        - contents
      properties:
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Content'
        tools:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
        toolConfig:
          $ref: '#/components/schemas/ToolConfig'
        safetySettings:
          type: array
          items:
            $ref: '#/components/schemas/SafetySetting'
        systemInstruction:
          $ref: '#/components/schemas/Content'
        generationConfig:
          $ref: '#/components/schemas/GenerationConfig'

    GenerateContentResponse:
      type: object
      properties:
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/Candidate'
        promptFeedback:
          $ref: '#/components/schemas/PromptFeedback'
        usageMetadata:
          $ref: '#/components/schemas/UsageMetadata'

    Content:
      type: object
      required:
        - parts
      properties:
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
        role:
          type: string
          enum: [user, model, function]
          description: Role of the content author

    Part:
      type: object
      oneOf:
        - $ref: '#/components/schemas/TextPart'
        - $ref: '#/components/schemas/InlineDataPart'
        - $ref: '#/components/schemas/FileDataPart'
        - $ref: '#/components/schemas/FunctionCallPart'
        - $ref: '#/components/schemas/FunctionResponsePart'

    TextPart:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          example: 'Write a story about AI'

    InlineDataPart:
      type: object
      required:
        - inlineData
      properties:
        inlineData:
          $ref: '#/components/schemas/Blob'

    FileDataPart:
      type: object
      required:
        - fileData
      properties:
        fileData:
          $ref: '#/components/schemas/FileData'

    FunctionCallPart:
      type: object
      required:
        - functionCall
      properties:
        functionCall:
          $ref: '#/components/schemas/FunctionCall'

    FunctionResponsePart:
      type: object
      required:
        - functionResponse
      properties:
        functionResponse:
          $ref: '#/components/schemas/FunctionResponse'

    Blob:
      type: object
      required:
        - mimeType
        - data
      properties:
        mimeType:
          type: string
          example: 'image/jpeg'
        data:
          type: string
          format: base64
          description: Base64 encoded data

    FileData:
      type: object
      required:
        - mimeType
        - fileUri
      properties:
        mimeType:
          type: string
        fileUri:
          type: string

    Candidate:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/Content'
        finishReason:
          type: string
          enum: [FINISH_REASON_UNSPECIFIED, STOP, MAX_TOKENS, SAFETY, RECITATION, OTHER]
        index:
          type: integer
        safetyRatings:
          type: array
          items:
            $ref: '#/components/schemas/SafetyRating'
        citationMetadata:
          $ref: '#/components/schemas/CitationMetadata'
        tokenCount:
          type: integer

    GenerationConfig:
      type: object
      properties:
        stopSequences:
          type: array
          items:
            type: string
        responseMimeType:
          type: string
          enum: [text/plain, application/json]
          default: text/plain
        responseSchema:
          type: object
        candidateCount:
          type: integer
          minimum: 1
        maxOutputTokens:
          type: integer
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
        topP:
          type: number
          format: float
        topK:
          type: integer

    SafetySetting:
      type: object
      required:
        - category
        - threshold
      properties:
        category:
          type: string
          enum:
            [
              HARM_CATEGORY_HARASSMENT,
              HARM_CATEGORY_HATE_SPEECH,
              HARM_CATEGORY_SEXUALLY_EXPLICIT,
              HARM_CATEGORY_DANGEROUS_CONTENT,
            ]
        threshold:
          type: string
          enum:
            [HARM_BLOCK_THRESHOLD_UNSPECIFIED, BLOCK_LOW_AND_ABOVE, BLOCK_MEDIUM_AND_ABOVE, BLOCK_ONLY_HIGH, BLOCK_NONE]

    SafetyRating:
      type: object
      properties:
        category:
          type: string
        probability:
          type: string
          enum: [NEGLIGIBLE, LOW, MEDIUM, HIGH]
        blocked:
          type: boolean

    # TOOLS & FUNCTIONS
    Tool:
      type: object
      properties:
        functionDeclarations:
          type: array
          items:
            $ref: '#/components/schemas/FunctionDeclaration'

    FunctionDeclaration:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: 'get_weather'
        description:
          type: string
          example: 'Get current weather for a location'
        parameters:
          type: object
          description: JSON Schema for function parameters

    FunctionCall:
      type: object
      required:
        - name
        - args
      properties:
        name:
          type: string
        args:
          type: object

    FunctionResponse:
      type: object
      required:
        - name
        - response
      properties:
        name:
          type: string
        response:
          type: object

    ToolConfig:
      type: object
      properties:
        functionCallingConfig:
          $ref: '#/components/schemas/FunctionCallingConfig'

    FunctionCallingConfig:
      type: object
      properties:
        mode:
          type: string
          enum: [MODE_UNSPECIFIED, AUTO, ANY, NONE]
          default: AUTO
        allowedFunctionNames:
          type: array
          items:
            type: string

    # TOKENS & EMBEDDINGS
    CountTokensRequest:
      type: object
      required:
        - contents
      properties:
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Content'

    CountTokensResponse:
      type: object
      properties:
        totalTokens:
          type: integer

    EmbedContentRequest:
      type: object
      required:
        - content
      properties:
        content:
          $ref: '#/components/schemas/Content'
        taskType:
          type: string
          enum:
            [
              TASK_TYPE_UNSPECIFIED,
              RETRIEVAL_QUERY,
              RETRIEVAL_DOCUMENT,
              SEMANTIC_SIMILARITY,
              CLASSIFICATION,
              CLUSTERING,
            ]
        title:
          type: string

    EmbedContentResponse:
      type: object
      properties:
        embedding:
          $ref: '#/components/schemas/ContentEmbedding'

    BatchEmbedContentsRequest:
      type: object
      required:
        - requests
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/EmbedContentRequest'

    BatchEmbedContentsResponse:
      type: object
      properties:
        embeddings:
          type: array
          items:
            $ref: '#/components/schemas/ContentEmbedding'

    ContentEmbedding:
      type: object
      properties:
        values:
          type: array
          items:
            type: number
            format: float

    # PREDICTION SCHEMAS
    PredictRequest:
      type: object
      required:
        - instances
      properties:
        instances:
          type: array
          items:
            type: object
          description: The instances that are the input to the prediction call
        parameters:
          type: object
          description: The parameters that govern the prediction call

    PredictResponse:
      type: object
      properties:
        predictions:
          type: array
          items:
            type: object
          description: The outputs of the prediction call

    # OPERATION SCHEMAS (for Long Running Operations)
    Operation:
      type: object
      properties:
        name:
          type: string
          description: The server-assigned name
        metadata:
          type: object
          description: Service-specific metadata associated with the operation
        done:
          type: boolean
          description: If the value is false, it means the operation is still in progress
        error:
          $ref: '#/components/schemas/Status'
        response:
          type: object
          description: The normal response of the operation if it was completed successfully

    # FILE SCHEMAS
    FileResponse:
      type: object
      properties:
        name:
          type: string
          description: The resource name of the File
          example: 'files/abc123'
        displayName:
          type: string
          description: The human-readable display name for the File
        mimeType:
          type: string
          description: MIME type of the file
        sizeBytes:
          type: string
          format: int64
          description: Size of the file in bytes
        createTime:
          type: string
          format: date-time
          description: The timestamp of when the File was created
        updateTime:
          type: string
          format: date-time
          description: The timestamp of when the File was last updated
        expirationTime:
          type: string
          format: date-time
          description: The timestamp of when the File will be deleted
        sha256Hash:
          type: string
          format: byte
          description: SHA-256 hash of the uploaded bytes
        uri:
          type: string
          description: The uri of the File
        state:
          type: string
          enum: [STATE_UNSPECIFIED, PROCESSING, ACTIVE, FAILED]
          description: Processing state of the File
        error:
          $ref: '#/components/schemas/Status'

    ListFilesResponse:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileResponse'
        nextPageToken:
          type: string
          description: A token which can be sent as pageToken to retrieve the next page

    # ERROR SCHEMAS
    Status:
      type: object
      properties:
        code:
          type: integer
          description: The status code
        message:
          type: string
          description: A developer-facing error message
        details:
          type: array
          items:
            type: object
          description: A list of messages that carry the error details

    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Status'
          description: Error details

    # METADATA
    PromptFeedback:
      type: object
      properties:
        blockReason:
          type: string
          enum: [BLOCK_REASON_UNSPECIFIED, SAFETY, OTHER]
        safetyRatings:
          type: array
          items:
            $ref: '#/components/schemas/SafetyRating'

    UsageMetadata:
      type: object
      properties:
        promptTokenCount:
          type: integer
        candidatesTokenCount:
          type: integer
        totalTokenCount:
          type: integer

    CitationMetadata:
      type: object
      properties:
        citationSources:
          type: array
          items:
            $ref: '#/components/schemas/CitationSource'

    CitationSource:
      type: object
      properties:
        startIndex:
          type: integer
        endIndex:
          type: integer
        uri:
          type: string
        license:
          type: string
